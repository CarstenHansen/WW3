#!/bin/bash
# --------------------------------------------------------------------------- #
# comp  : Compiler script for use in ad3 (customized for hardware and         #
#         optimization). Note that this script will not be replaced if part   #
#         of WAVEWATCH III is re-installed. Used by ad3.                      #
#                                                                             #
# use   : comp name                                                           #
#           name: name of source code file without the extension.             #
#                                                                             #
# error codes :  1 : input error                                              #
#                2 : no environment file $ww3_env found.                      #
#                3 : error in creating scratch directory.                     #
#                4 : w3adc error.                                             #
#                5 : compiler error.                                          #
#                                                                             #
# remarks :                                                                   #
#                                                                             #
#  - This script runs from the scratch directory, where it should remain.     #
#                                                                             #
#  - For this script to interact with ad3, it needs to generate / leave       #
#    following files :                                                        #
#       $name.F90         : Source code (generated by ad3).                   #
#       $name.l           : Listing file.                                     #
#       $name.o           : Object module.                                    #
#       comp.stat.$name   : status file of compiler, containing number of     #
#                           errors and number of warnings (generated by comp) #
#                                                                             #
#  - Upon (first) installation of WAVEWATCH III the user needs to check the   #
#    existing compilers and options available in the script cmplr.env         #
#                                                                             #
#  - This version is a template for mpt/intel/gnu/pgi with optimized or       #
#    debugging options by adding _debug                                       #
#                                                                             #
#                                                      M. Accensi             #
#                                                      August   2018          #
# --------------------------------------------------------------------------- #
#
# CHA at FCOO, note: This script requires an exported path NETCDF_CONFIG
# pointing to the program nf_config, and exported mpi include flags in FFLAGS.
# To load the aquired paths to libraries and binaries (e.g. gfortran, mpifort and
# nf_config), we use the lmod program, invoked by a bash function module. The
# following example is for the gfortran-13 compiler and the netcdf-fortran
# libraries. To determine which modules are available, set first a combination
# of:
#
# > FC=gfortran # or FC=ifort, or ...
# > VAR=ieee # or VAR=debug
# > MPILIB=openmpi # or MPILIB=mvapich2, or ...
#
#
# A. WW3 sequental programs with netcdf I/O:
# -----------------------------------------
#
# For the WW3 sequental programs, seek both for netcdf-fortran,and  also for
# the compiler itself:
# > module avail netcdf-fortran
# > module avail $FC
# You may narrow-in and sort these lists:
# > module avail netcdf-fortran 2>&1 | egrep $FC.*$VAR | sort --version-sort
# > module avail $FC 2>&1 | egrep ^' '*$FC.*$VAR | sort --version-sort
#
# Then choose and load the compiler itself, and the specific library package:
#
# > module purge
# > module load gfortran/13.1.0/ieee netcdf-fortran/4.6.0/gfortran-13.1.0-ieee
#
# Note, it will cause an error not to load gfortran/13.1.0/ieee, because the
# compiler name gfortran will then be associated with the standard
# /usr/bin/gfortran, which is probably another version installed in the system.
#
# The module load ... (above) yields:
#   FFLAGS='-I/opt/netcdf-fortran-4.6.0/gfortran-13.1.0-ieee/include'
#   FLIBS=' -L/opt/netcdf-fortran-4.6.0/gfortran-13.1.0-ieee/lib -lnetcdff'
# So FFLAGS is exported by lmod. You may also compare the fortran compile
# options (opt=... below) with the contents of $FCFLAGS also exported by lmod.
# 
# If NETCDF_CONFIG is not exported, you can do:
#
# export NETCDF_CONFIG=${NETCDF_BINDIR}/nf-config, where
# NETCDF_BINDIR=/opt/netcdf-fortran-*/gfortran-13.1.0-ieee/bin
#
# Note also that for nc-config under ifort, both of --fflags --cflags are
# required options to yield the compile include flags.
#
#
# B. WW3 parallel programs ww3_shel or ww3_multi
# ----------------------------------------------
#
# For the WW3 parallel programs we need one of the modules available:
# > module avail $MPILIB
# You may narrow-in and sort this list:
# > module avail $MPILIB 2>&1 | egrep $FC.*$VAR | sort --version-sort
#
# Then choose and load the specific library package:
#
# module load mpi/openmpi/4.1.5/gfortran-13.1.0-ieee
#
# At present the WW3 parallel programs don't use the netcdf libraries, and
# you need only to load the MPI libraries. Unlike the netcdf-fortran modules,
# this also adds to $PATH the file path to mpifort and the corresponding path
# to the compiler, which is also pointed to by FC=gfortran (or FC=ifort). (But
# it makes no harm to also load gfortran/13.1.0/ieee.)
#
# --------------------------------------------------------------------------- #
# 1. Preparations                                                             #
# --------------------------------------------------------------------------- #

# 1.a Check and process input

  if [ "$#" -ne '1' ]
  then
    echo "usage: comp name" ; exit 1
  fi
  name="$1"
  echo "      Compiling $name"

# 1.b Initial clean-up - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rm -f $name.l
  rm -f $name.o
  rm -f $name.out
  rm -f $name.err
  rm -f comp.stat.$name

# --------------------------------------------------------------------------- #
# 2. Compile                                                                  #
# --------------------------------------------------------------------------- #

# 2.a Build options and determine compiler name - - - - - - - - - - - - - - - -

  # compiler
  if [ "$mpi_mod" = 'yes' ] ; then
    comp='mpifort' # Alias 'mpif90'
  else
    comp='ifort'
  fi

  # compilation options
  opt="-c -module $path_m -no-fma -ip -g -traceback -i4 -real-size 32 -fp-model precise -assume byterecl -fno-alias -fno-fnalias -sox -O3 -xhost"

  # CHA at FCOO: Ommit  "-ip -assume byterecl -xhost -fno-fnalias" ?,
  # add "-check bounds -C -mp1" ?
  # CHA at FCOO: May include other flags in $FCFLAGS (from loaded module)
  
  # CHA at FCOO: We use lmod/module exporting an FFLAGS ('-I<path>') option
  # This *should* be incorporated in the mpifort script, but check/test that
  # if [ "$mpi_mod" = 'yes' ] ; then
  #     if [[ "$FFLAGS" =~ mpi ]]; then
  #         opt="$opt $FFLAGS"
  #     else
  #        echo "NO mpi library exported in FFLAGS=$FFLAGS ?" ; exit 1
  #     fi
  # fi
  
  # oasis coupler include dir
  if [ "$oasis_mod" = 'yes' ]
  then
    opt="$opt -I$OASISDIR/build/lib/psmile.MPI1"
  fi

  # netcdf include dir
  if [ "$netcdf_compile" = 'yes' ]
  then
    if [ "$mpi_mod" = 'no' ]; then comp="`$NETCDF_CONFIG --fc`"; fi
    # opt="$opt `$NETCDF_CONFIG --cflags`"
    # CHA at FCOO: Fortran compile flags first needed with ifort and 'USE NETCDF'
    opt="$opt `$NETCDF_CONFIG --fflags --cflags`"
  fi

  # src include dir
  opt="$opt -I$path_i"
  opt="$opt $ESMF_F90COMPILEPATHS"
  opt="$opt $EXTRA_COMP_OPTIONS"

  # OMP support
  if [ "$omp_mod" = 'yes' ] ; then
    opt="$opt -openmp"
  fi

# 2.b Compile - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # CHA at FCOO:
  echo "Compile command:" 1> $name.out
  echo "$comp $opt $name.$fext" 1>> $name.out

  $comp $opt $name.$fext 1>> $name.out 2> $name.err
  OK="$?"

# --------------------------------------------------------------------------- #
# 3. Postprocessing                                                           #
# --------------------------------------------------------------------------- #

# 3.a Capture errors - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     nr_err : number of errors.
#     nr_war : number of warnings.

  nr_err='0'
  nr_war='0'

  if [ -s $name.err ]
  then
    nr_err="$(grep -i '[[:space:]]error[[:space:]]' $name.err | wc -l | awk '{ print $1 }')"
    nr_war="$(grep -i 'warn' $name.err | wc -l | awk '{ print $1 }')"
  else
    if [ "$OK" != '0' ]
    then
      nr_err='1'
    fi
  fi

# 3.b Make file comp.stat  - - - - - - - - - - - - - - - - - - - - - - - - - -

  echo "ERROR    $nr_err"   > comp.stat.$name
  echo "WARNING  $nr_war"  >> comp.stat.$name

# 3.c Prepare listing  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     if compiler does not provide listing, make listing from source code
#     and compiler messages. Second input line for w3list identifies if
#     comment lines are to be numbered.

  # listing done by the compiler
  if [ -s $name.lst ]
  then
    mv $name.lst $name.l
  fi
  # add comp options, warnings and error to listing
  if [ -s $name.l ]
  then
    echo '------------' >> $name.l
    echo "$comp $opt"   >> $name.l
    echo '------------' >> $name.l
    cat $name.out       >> $name.l 2> /dev/null
    echo '------------' >> $name.l
    cat $name.err       >> $name.l 2> /dev/null
    echo '------------' >> $name.l
  fi

  # remove empty warning and error files
  # find . -name "*.out" -or -name "*.err" -empty -delete

# end of comp --------------------------------------------------------------- #
